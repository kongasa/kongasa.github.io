(self.webpackChunkkongasa_blog=self.webpackChunkkongasa_blog||[]).push([[220],{3709:(e,s,r)=>{"use strict";r.r(s),r.d(s,{data:()=>n});const n={key:"v-6c0fd3fe",path:"/learning/tools/rxjs.html",title:"RxJS 基础概念理解",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Observable",slug:"observable",children:[]},{level:2,title:"Observer",slug:"observer",children:[]},{level:2,title:"Subscription",slug:"subscription",children:[]},{level:2,title:"Subject",slug:"subject",children:[]}],filePathRelative:"learning/tools/rxjs.md",git:{updatedTime:1620285788e3}}},2261:(e,s,r)=>{"use strict";r.r(s),r.d(s,{default:()=>v});var n=r(6252);const a=(0,n.Wm)("h1",{id:"rxjs-基础概念理解"},[(0,n.Wm)("a",{class:"header-anchor",href:"#rxjs-基础概念理解"},"#"),(0,n.Uk)(" RxJS 基础概念理解")],-1),c=(0,n.Uk)("前置知识 "),o=(0,n.Uk)("Promise 原理"),b=(0,n.Uk)("因为在最开始学 RxJS 的时候既不知道 RxJS 要解决什么，又不理解它奇怪的起名，导致官方文档看不下去，又因为需要马上做一个 Request 管理模块出来，所以就跟着 "),l=(0,n.Wm)("a",{href:"learnrxjs.io"},"Learn RxJS",-1),t=(0,n.Uk)(" 上的带示例文档先勉强把工具写出来了。之后跟着知乎上 "),p={href:"https://zhuanlan.zhihu.com/p/58428287",target:"_blank",rel:"noopener noreferrer"},i=(0,n.Uk)("图解 Promise"),d=(0,n.Uk)(" 系列好好地看了看Promise 是怎么实现的。后来又想看看 RxJS，发现两者十分相像。于是简单辨析一下 RxJS 官方文档中 Introduction 介绍的各种概念。"),u=(0,n.uE)('<p>下文概念将使用英文原名以避免翻译导致的混淆。</p><p>如果能够理解 Promise 的使用方法，不需要纠结于什么是 Pull 和 Push，还有观察者模式。关注逻辑本身。</p><h2 id="observable"><a class="header-anchor" href="#observable">#</a> Observable</h2><p>是数据的发生器，每次数据发生都只交给一个 Observer（也称单播）。</p><p>它的创建（仅介绍最基本的 <code>.create()</code>）接收一个函数，这个函数应当具有以下形态</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// deal with data</span>\n  <span class="token comment">// observer.next(data);</span>\n  <span class="token comment">// observer.error(error);</span>\n  <span class="token comment">// observer.complete();</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这个函数将配合后来挂载到 Observable 上的 Observer，将数据传递给 Observable 对应的函数。</p><p>看起来很像 Promise 的部署（或者称初始化过程），但区别是 Observable 是被动的（或称「懒」），它并不会立刻执行，而是被触发时才会执行。</p><p>当 Observable 被触发时（触发有多种方式，Introduction 中最先出现的是使用 <code>subscribe()</code> 方法，该方法将 Observer 挂载到 Observable 上，立即触发实例化 Observable 时使用的函数，并返回一个 Subscription），它会调用创建时的函数，通过接口（指 <code>next()</code>, <code>error()</code>, <code>complete()</code>）将数据传输给 Observer 的处理函数。</p><h2 id="observer"><a class="header-anchor" href="#observer">#</a> Observer</h2><p>是一个简单的对象，它是 Observable 输出结果的处理函数的集合。</p><p>它必须包含 <code>next</code> 属性，可包含 <code>error</code> 和 <code>complete</code> 属性，此三属性需为函数。</p><p>上文提到的 <code>subscribe()</code> 方法可直接接受三个函数参数来替代 Observer 参数。</p><h2 id="subscription"><a class="header-anchor" href="#subscription">#</a> Subscription</h2><p>通常 Subscription 是通过 Observable 的触发得到的。一个 Subscription 代表有一个 Observable-Observer 已经被触发了。Subscription 通常用来取消 Observable 的执行（使用 <code>unsubscribe()</code> 方法）。</p><h2 id="subject"><a class="header-anchor" href="#subject">#</a> Subject</h2><p>Subject 是 Observable 和 Observer 的链接器，它拥有 <code>next()</code>, <code>error()</code>, <code>complete()</code>, <code>subscribe()</code> 方法。它能在链接多个 Observer 后，链接一个 Observable，链接 Observable 时会触发 Observable，Observable 产生的数据会传递给 Subject 链接的所有 Observer（实现多播）。</p><p>使用 <code>multicast()</code> 操作符可以控制触发 Observable 的时机（原来触发是在挂载时立即发生的，现在需要调用 <code>connect()</code>）。</p><p>使用 <code>refCount()</code> 操作符可以将 <code>connect()</code> 和<code>unsubscribe()</code> 的调用自动化，在出现第一个 Observer 的链接时调用 <code>connect()</code> ，在所有 Subscription 取消后，取消 <code>Observable</code> 的执行。</p><p>Subject 有多种变体，不再叙述。</p>',20),v={render:function(e,s){const r=(0,n.up)("RouterLink"),v=(0,n.up)("OutboundLink");return(0,n.wg)(),(0,n.j4)(n.HY,null,[a,(0,n.Wm)("p",null,[c,(0,n.Wm)(r,{to:"/learning/web-foundation/promise-base.html"},{default:(0,n.w5)((()=>[o])),_:1})]),(0,n.Wm)("p",null,[b,l,t,(0,n.Wm)("a",p,[i,(0,n.Wm)(v)]),d]),u],64)}}}}]);