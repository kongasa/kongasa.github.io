(self.webpackChunkkongasa_blog=self.webpackChunkkongasa_blog||[]).push([[983],{5444:(e,t,a)=>{"use strict";a.r(t),a.d(t,{data:()=>n});const n={key:"v-060d87ca",path:"/learning/tools/Vuex.html",title:"Vuex",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"核心概念",slug:"核心概念",children:[{level:3,title:"State",slug:"state",children:[]},{level:3,title:"Getter",slug:"getter",children:[]},{level:3,title:"Mutation",slug:"mutation",children:[]},{level:3,title:"Action",slug:"action",children:[]},{level:3,title:"Module",slug:"module",children:[]}]},{level:2,title:"组合式 API",slug:"组合式-api",children:[]}],filePathRelative:"learning/tools/Vuex.md",git:{updatedTime:1620870348e3}}},2726:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>s});const n=(0,a(6252).uE)('<h1 id="vuex"><a class="header-anchor" href="#vuex">#</a> Vuex</h1><p>Vuex 是使用在 Vue 中的 state management（状态控制器，但是由于 state 在响应式前端中是一个专有名词，而状态太过笼统，故不做翻译）。</p><p>Vuex v4.x 针对 Vue3 开发，是本文研究对象。</p><h2 id="核心概念"><a class="header-anchor" href="#核心概念">#</a> 核心概念</h2><h3 id="state"><a class="header-anchor" href="#state">#</a> State</h3><p>Vuex 在设计上被设计成单一状态树结构，整个应用使用一个对象进行存取。</p><p>Vuex 中存储的数据要求和 Vue 的 data 一样，需要是纯粹的（通常是由写代码的人创建的变量，一般具有懒惰性质，假如程序员没有对其进行直接改变，它就不会改变，像 window，document 等由浏览器提供的变量就是不纯粹的）。</p><p>Vuex 将状态树从 Vue 的根组件注入，所有后代组件都可以通过 this.$store 进行访问。</p><h3 id="getter"><a class="header-anchor" href="#getter">#</a> Getter</h3><p>由于会对储存的 state 进行一些通用的操作，为减少冗余，可以在 store 中定义 getter，通过属性或方法方式进行访问。</p><h3 id="mutation"><a class="header-anchor" href="#mutation">#</a> Mutation</h3><p>更改 Vuex 的 state 的唯一方式是提交 mutation。</p><p>在 store 中声明（<code>mutationName(state, ...args){}</code>）后，可以使用 <code>store.commit(‘mutationName’, ...args)</code> 方法进行调用。</p><p>mutation 必须是同步函数。或者说不能把异步功能放到 mutation 中。</p><h3 id="action"><a class="header-anchor" href="#action">#</a> Action</h3><p>action 提交 mutation，但不直接改变状态。action 可以包含异步操作。</p><div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code>actions: {\n  increment (context) {\n    context.commit(&#39;increment&#39;)\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其中的 context 对象拥有和 store 相同的方法和属性。</p><p>使用 <code>store.dispatch(‘actionName’, ...args)</code> 进行触发。</p><p>action 是可以返回 Promise 的，因此可以使用 then 进行异步调用。</p><h3 id="module"><a class="header-anchor" href="#module">#</a> Module</h3><p>防止 store 变得过大，Vuex 允许将 store 分割为几个模块。</p><p>在模块中 mutation 和 getter 接受的是模块的状态对象。</p><p>根节点在 action 中通过 context.rootState 暴露，在 getter 中通过第三个参数暴露</p><h2 id="组合式-api"><a class="header-anchor" href="#组合式-api">#</a> 组合式 API</h2><p>调用 useStore 函数可以在 setup 中访问 store，这和 this.$store 是一致的。</p><p>访问 state 和 getter 需要创建 computed 来保留响应性。</p><p>调用 mutation 和 action 可以直接通过 useStore 提供的 store。</p>',28),s={render:function(e,t){return n}}}}]);