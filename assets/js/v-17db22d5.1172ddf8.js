(self.webpackChunkkongasa_blog=self.webpackChunkkongasa_blog||[]).push([[834],{4319:(l,e,r)=>{"use strict";r.r(e),r.d(e,{data:()=>o});const o={key:"v-17db22d5",path:"/learning/tools/rollup.html",title:"Rollup",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"为什么学 Rollup？",slug:"为什么学-rollup",children:[]},{level:2,title:"什么是打包？",slug:"什么是打包",children:[]},{level:2,title:"Rollup",slug:"rollup-1",children:[]}],filePathRelative:"learning/tools/rollup.md",git:{updatedTime:1620870348e3}}},3606:(l,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>m});var o=r(6252);const a=(0,o.uE)('<h1 id="rollup"><a class="header-anchor" href="#rollup">#</a> Rollup</h1><h2 id="为什么学-rollup"><a class="header-anchor" href="#为什么学-rollup">#</a> 为什么学 Rollup？</h2><p>Vite 现在默认使用 Rollup 进行打包。而许多 npm 包使用 CommonJS 语法，甚至会在运行时调用 process 变量。</p><p>Rollup 提供了将 CommonJS 语法打包为 ES6 语法的途径，来让前端开发更方便。</p><h2 id="什么是打包"><a class="header-anchor" href="#什么是打包">#</a> 什么是打包？</h2><p>在 ES6 发布前，JavaScript 不支持模块化（存在社区标准 CommonJS，但是 CommonJS 是因服务端开发需求而诞生的）。为了在开发过程中实现模块化，出现了 Webpack、Rollup 等打包工具，将开发过程中众多互相依赖的源码文件（不仅是 JavaScript，还有 HTML 和 CSS）全部塞进几个文件中（也是因此输出文件常被叫做 bundle），来实现在浏览器上的部署。</p><p>现代前端开发中脚手架（快速生成某种基本结构的命令或程序）似乎过于方便，以至于打包的原因被忽略了。</p>',7),p=(0,o.Uk)("有兴趣可以看看 d3.js 在 github 上的代码。"),t={href:"https://github.com/d3/d3",target:"_blank",rel:"noopener noreferrer"},u=(0,o.Uk)("d3/d3"),n=(0,o.Uk)(" 本身只是一个打包器，功能代码存放在 "),h={href:"https://github.com/d3",target:"_blank",rel:"noopener noreferrer"},d=(0,o.Uk)("d3"),s=(0,o.Uk)(" 的其他项目中。"),i=(0,o.Wm)("h2",{id:"rollup-1"},[(0,o.Wm)("a",{class:"header-anchor",href:"#rollup-1"},"#"),(0,o.Uk)(" Rollup")],-1),c=(0,o.Wm)("p",null,"Rollup 的出现离不开 ES6 模块标准的推出。Rollup 最终的编译结果是 ES6 标准的模块，也是因此它只能在支持 ES6 模块标准的浏览器上使用。",-1),m={render:function(l,e){const r=(0,o.up)("OutboundLink");return(0,o.wg)(),(0,o.j4)(o.HY,null,[a,(0,o.Wm)("p",null,[p,(0,o.Wm)("a",t,[u,(0,o.Wm)(r)]),n,(0,o.Wm)("a",h,[d,(0,o.Wm)(r)]),s]),i,c],64)}}}}]);